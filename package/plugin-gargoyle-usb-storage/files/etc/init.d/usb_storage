#!/bin/sh /etc/rc.common

START=56

update_sharetype()
{
	section="$1"
	config_get path $1 path
	if [ "$path" = "$cur_mount" ] ; then
		shared=1		
	fi
}


is_mounted() {
	# Exit with 0 if is mounted, else $1
	awk -v devpath="$1" '$1 == devpath {f=1; exit} END {exit !f}' /proc/mounts
}

usb_lock()
{
	timeout=15
	got_lock=0
	if [ ! -e /tmp/usb_restart.lock ] ; then
		touch /tmp/usb_restart.lock
		got_lock=1
	fi
	echo "$got_lock"
}

usb_unlock()
{
	rm -rf /tmp/usb_restart.lock
}


start()
{
	got_lock=$(usb_lock)
	if [ "$got_lock" = "1" ] ; then
		do_start
		usb_unlock
	fi
}

do_start()
{
	gdisplay=$(uci get gargoyle.display.system_usb_storage 2>/dev/null)
	if [ -z "$gdisplay" ] ; then
		uci set gargoyle.display.system_usb_storage='USB Storage'
		uci set gargoyle.scripts.system_usb_storage='usb_storage.sh'
		uci set gargoyle.system.usb_storage='350'
		uci commit
	fi

	drives="$(blkid | sed -r 's#"##g; s#:[[:blank:]]+UUID=#:#g')"
	
	echo "$drives" >/tmp/drives_found.txt
	date >>/tmp/drives_found.txt
	
	unset mounted

	for devid in $drives; do
		id=$(echo "$devid" | cut -f 2 -d ':')
		d=$(echo "$devid" | cut -f 1 -d ':')
		did="${d##*/}"

		if [ -z "$id" ] || [ -z "$d" ] || is_mounted "$d"; then
			continue
		fi
		
		rmdir "/tmp/usb_mount/$did" > /dev/null 2>&1

		type=$(disktype "$d" | egrep -o "Ext.|FAT..|NTFS|Linux swap") 

		unset err

		case "${type}" in
			'FAT32'|'FAT16')
				mkdir -p "/tmp/usb_mount/$id"
				umount "/tmp/usb_mount/$id" 2>/dev/null
				mount -t vfat -o umask=0,dmask=0 "$d" "/tmp/usb_mount/$id" || umount "/tmp/usb_mount/$id" 2>/dev/null
			;;
			'NTFS')
				mkdir -p "/tmp/usb_mount/$id"
				umount "/tmp/usb_mount/$id" 2>/dev/null
				ntfs-3g "$d" "/tmp/usb_mount/$id" || umount "/tmp/usb_mount/$id"
			;;
			'Linux swap')
				swapon "$d"
			;;
			'Ext4'|'Ext3')
				# disktype misdetect ext4 as ext3. Try mount as ext3 first then fallback to ext4.
				# in some circumstances ext3 may be mounted as ext4 but if you write anything to it
				# the filesystem will be no longer compatible with ext3.
				mkdir -p "/tmp/usb_mount/$id"
				umount "/tmp/usb_mount/$id" 2>/dev/null					
				if mount -t ext3 -o noatime "$d" "/tmp/usb_mount/$id"; then
					type='ext3'
				elif mount -t ext4 -o noatime "$d" "/tmp/usb_mount/$id"; then
					type='ext4'
				else
					# Something went wrong.
					umount "/tmp/usb_mount/$id"
				fi
			;;
			'Ext2')
				mkdir -p "/tmp/usb_mount/$id"
				umount "/tmp/usb_mount/$id" 2>/dev/null
				mount -t ext2 -o noatime "$d" "/tmp/usb_mount/$id" || umount "/tmp/usb_mount/$id" 2> /dev/null
			;;
			*)
				err="unmountable"
			;;
		esac

		if [ -z "$err" ] ; then
			share_type=""
			cur_mount="/tmp/usb_mount/$id"
		
			shared=0
			config_load "samba"
			config_foreach update_sharetype "sambashare"
			if [ "$shared" = "1" ] ; then share_type="S" ; fi
			
			shared=0
			config_load "nfsd"
			config_foreach update_sharetype "nfsshare"
			if [ "$shared" = "1" ] ; then share_type="N$share_type" ; fi
			if [ -z "$share_type" ] ; then share_type="-" ; fi
					
			share_size=$(df  | grep "$d" | awk '{ print $2 }')
			if [ -z "$share_size" ] ; then share_size="-" ; fi
			if [ -n "$share_size" ] && [ "${share_size}" != '-' ]; then share_size=$(($share_size*1024)) ; fi

			echo "$d	/tmp/usb_mount/$id	$type	$share_size	$share_type"  >>/tmp/mounted_usb_storage.tab
		
			ln -s "/tmp/usb_mount/$id" "/tmp/usb_mount/dev_$did"

			mounted="$mounted /tmp/usb_mount/$id"
		fi
	done
}

stop()
{
	got_lock=$(usb_lock)
	if [ "$got_lock" = "1" ] ; then
		do_stop
		usb_unlock
	fi
}

restart()
{
	got_lock=$(usb_lock)
	if [ "$got_lock" = "1" ] ; then
		do_stop
		do_start
		usb_unlock
	fi
}

do_swapoff() {
	# Umount swap.
	# We will care only about /dev/sd*. We will not affect zram users (/dev/zram0 etc).
	while read swap_device_path _; do
		case "${swap_device_path}" in
			'/dev/sd'*)
				swapoff "${swap_device_path}"
			;;
		esac
	done < /proc/swaps
}

do_stop()
{
	if [ -f '/tmp/mounted_usb_storage.tab' ];  then
		while read device_path mountpoint_path _; do
			umount "${mountpoint_path}"
			# Cleanup mountpoint and symlink.
			rmdir "${mountpoint_path}"
			rm "/tmp/usb_mount/dev_${device_path##*/}"
		done < /tmp/mounted_usb_storage.tab

		rm /tmp/mounted_usb_storage.tab
	fi
	do_swapoff
}
